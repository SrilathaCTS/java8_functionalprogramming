package com.functionalprograming;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
 

public class FlatMapperExample {

    public static void main(String[] args) {

        List<User> users = Arrays.asList(
                new User("Sri", 20, Arrays.asList("12342435", "768797978987")),
                new User("Sam", 40, Arrays.asList("87987987", "87987", "09-90-9-09-90")),
                new User("Venu", 60, Arrays.asList("342535")),
                new User("Adam", 70, Arrays.asList("342535", "23466765"))
        );
        
        users.stream()
        .map(user -> user.getPhoneNumbers().stream())
        .map(phoneStream -> phoneStream.filter(phoneNo -> phoneNo.equals("768797978987")))
        .forEach(System.out::println);
        
        users.stream()
        .map(user -> user.getPhoneNumbers().stream())
        .flatMap(phoneStream -> phoneStream.filter(phoneNo -> phoneNo.equals("768797978987")))
        .forEach(System.out::println);

        Optional<String> stringOptional = users.stream()
                .map(user -> user.getPhoneNumbers().stream())
                .flatMap(phoneStream -> phoneStream.filter(phoneNo -> phoneNo.equals("342535")))
                .findAny();

        stringOptional.ifPresent(System.out::println);
        
        List<Integer> evens = Arrays.asList(2, 4, 6); 
        List<Integer> odds = Arrays.asList(3, 5, 7); 
        List<Integer> primes = Arrays.asList(2, 3, 5, 7, 11); 
        List<Integer> numbers = Stream.of(evens, odds, primes) .flatMap(list -> list.stream()) .collect(Collectors.toList());
        System.out.println("flattend list: " + numbers); 
        
        List<Stream<Integer>> number1 = Stream.of(evens, odds, primes) .map(list -> list.stream()) .collect(Collectors.toList());
        
        System.out.println("map list: " + number1); 
        
        List<String> loseWeight = new ArrayList<>(); 
        loseWeight.add("avocados"); loseWeight.add("beans"); 
        loseWeight.add("salad"); loseWeight.add("oats"); 
        loseWeight.add("broccoli"); 
        System.out.println("list of String : " + loseWeight); 
        // let's use map() method to convert list of weight // lose food, which are String to list of ints // which are length of each food String 
        List<Integer> listOfInts = loseWeight.stream() .map(s -> s.length()) .collect(Collectors.toList()); 
        System.out.println("list of ints generate by map(): " + listOfInts); 
        // flatMap() example, let's first creat a list of list 
        List<List<Integer>> listOfListOfNumber = new ArrayList<>(); listOfListOfNumber.add(Arrays.asList(2, 4)); 
        listOfListOfNumber.add(Arrays.asList(3, 9)); 
        listOfListOfNumber.add(Arrays.asList(4, 16)); 
        System.out.println("list of list : " + listOfListOfNumber);
        // let's use flatMap() to flatten this list into // list of integers i.e. 2,4,3,9,4,16 
        List<Integer> listOfIntegers = listOfListOfNumber.stream() .flatMap( list -> list.stream()) .collect(Collectors.toList()); 
        System.out.println("list of numbers generated by flatMap : " + listOfIntegers); 

        

        
    }
 
static class User {
        private String name;
        private Integer age;
        private List<String> phoneNumbers;
        
    	public User(String name, Integer age, List<String> phoneNumbers) {
			super();
			this.name = name;
			this.age = age;
			this.phoneNumbers = phoneNumbers;
		}

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public Integer getAge() {
			return age;
		}

		public void setAge(Integer age) {
			this.age = age;
		}

		public List<String> getPhoneNumbers() {
			return phoneNumbers;
		}

		public void setPhoneNumbers(List<String> phoneNumbers) {
			this.phoneNumbers = phoneNumbers;
		}

    }
}